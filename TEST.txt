TEST.txt
-----------------------------
This report evaluates the effectiveness of our search engine's
indexing and ranking algorithms across a set of 20 test queries.


Improvements
-----------------------------
We refined the indexing process by pruning duplicate documents
that were exact or near.

We also accounted for important tags (title, bold, headings)
within our postings, and integrated PageRank and HITS scores
into each document by keeping track of the URLs in
each document.

Our search engine uses cosine similarity in addition to TF-IDF
sums and promotes terms based on its importance. These are
mixed with a static quality score per document, which is
computed as a mix of PageRank and HITS scores.

To improve query times, we used a cache on postings retrieval
to avoid expensive disk reads and pruned stop-words in our queries
where necessary (that is if there were too many stop-words or
too little).


Report
-----------------------------
Initial performance and query time (avg in milliseconds) use M2
as a basis.

We use 10 good, 10 bad queries from M2 to evaluate the search
engine performance.

We mostly evaluated the search engine based on a student trying
to find quick information related to the query using a few keywords
(not necessarily ordered). The URL had to be a good authority pages
but also a hub page to link to other resources if necessary.

We provide an explanation for each query on what factors contributed
to its improvement, especially for the last 10 queries.

Each query is divided by a set of brackets [ ] with a number.

Note: The first 10 queries that performed well in M2.
The last 10 queries performed poorly in M2.
For each query, we only evaluate based on the top 5 results.


[ 1 ]
query: "pattis notes"

initial
    - time: 15.68ms
    - performance:  Our queries are related to pattis's website
                    and contains many relevant notes for his
                    course offerings.

final
    - time: 10.50ms
    - performance:  Our query does return fewer results from
                    pattis's course offerings, but in exchange,
                    we find pattis's main website and a new URL
                    referencing more detailed notes as opposed to
                    "frameindex.html". This uses cosine scoring and
                    quality to achieve such results while remaining similar.


[ 2 ]
query: "uci gaming"

initial
    - time: 84.31ms
    - performance:  We saw many queries related to a GameLab
                    presentation which is closely tied to our
                    query to an extent.

final
    - time: 14.37ms
    - performance:  Our queries have similar ranked results
                    with the GameLab presentation pages
                    dominating our results, which means our
                    changes did not affect this query.


[ 3 ]
query: "thornton ics 33"

initial
    - time: 50.88ms
    - performance:  The results are closely related to thornton's ICS
                    33 website as expected of our query.

final
    - time: 6.25ms
    - performance:  Our changes minimally affected the results.
                    The only difference is that one of the pages from
                    thornton's ICS 46 course page is shown in place of
                    thornton's home website.


[ 4 ]
query: "SQL"

initial
    - time: 15.72ms
    - performance:  We see page references to courses closely related
                    to SQL such as cs122b and cs122a.

final
    - time: 5.30ms
    - performance:  There is a noticeable difference in time possibly
                    from our postings cache retrieval, which improves
                    for subsequent queries. The results remain similar
                    too with even different references such as Intro to Data
                    Management class under thornton's ICS 184.



[ 5 ]
query: "binary tree ics 46"

initial
    - time: 37.69ms
    - performance:  The query returns relevant results on binary trees
                    such as BSTs and AVL trees from thornton's ICS 46 offering
                    which is expected.

final
    - time: 4.39ms
    - performance:  The query time is greatly improved as a result
                    of previous cached queries. Additionally, the query
                    remains the same with one notable exception being
                    the pruning of binary search tree pages possibly
                    from similarity detection. In exchange, we see
                    comparison based sorting which is closely related to
                    binary trees.


[ 6 ]
query: "eppstein graph"

initial
    - time: 37.85ms
    - performance:  Results are closely related to eppstein and graph since
                    it includes eppstein's geometry notes (which is graphic-related),
                    his graph algorithms publications, and graph drawing software.

final
    - time: 10.59ms
    - performance:  Query time is much better than the previous engine
                    while at the same time providing the same results
                    from the initial query.


[ 7 ]
query: "python is a dynamically typed language"

initial
    - time: 62.57ms
    - performance:  Queries mention Python type annotations, which is fairly close
                    to our original query. Additionally, several of the pages
                    reference Python and info related to how Python handles types.

final
    - time: 16.12ms
    - performance:  We see greatly improved performance in this query as a
                    result of the cached Postings. Additionally, the query remains
                    almost identical with one small caveat being a reference to
                    iftekha's home page. Since there is relevant pages from the 2nd
                    result downwards, this isn't a big deal.


[ 8 ]
query: "candy store"

initial
    - time: 15.66ms
    - performance:  The query showcases several pictures from eppstein on his
                    candy store hike, which is closely related to the query.

final
    - time: 4.93ms
    - performance:  In addition to better performance from cached postings
                    retrieval, the results remain virtually identical
                    with different yet connected pages appearing at the top
                    instead, which shows that the changes minimally affected
                    the results.


[ 9 ]
query: "assignment 1 cs 121"

initial
    - time: 15.72 ms
    - performance:  Query shows results related to CS 121 / INF 141, which is
                    as expected to the user. It also shows info on assignments /
                    HW which is not too dissimilar from what the user wanted.

final
    - time: 13.65ms
    - performance:  Query remains roughly the same with information about
                    CS 121 / INF 141 appearing at the top, including HW info.
                    This shows that our changes had minimal impact.


[ 10 ]
query: "welcome to china"

initial
    - time: 15.60ms
    - performance:  Query shows several URLs related to China trips and
                    returning from a long break possibly from the welcome
                    term. It seems to be as expected.

final
    - time: 2.19ms
    - performance:  Performance is greatly improved by caching Posting
                    retrievals. At the same time our changes minimally
                    affected the results, as they are roughly the same
                    (both contain China trips and returning from long break).
                    Also the stop-word is pruned which increases
                    performance.


[ 11 ]
query: "to be or not to be that is the question"

initial
    - time: 416.77ms
    - performance:  Our query engine struggles to process
                    many stop-words at a time, which meant
                    the query time exceeded past our allowed time.

final
    - time: 266.48 ms -> 34.13 ms
    - performance:  We made changes to how we parse stop-words
                    by selecting only a few stop-words, namely
                    the stop-words that were least frequent.

                    The cache on postings retrievals also
                    makes subsequent queries on stop-words fast.
                    The time improvement from using the cache is
                    denoted by the right arrow.


[ 12 ]
query: "Ics"

initial
    - time: 84.31ms
    - performance:  Our queries mostly returned results from
                    irani's 6B and 6D pages, which is perhaps
                    too focused for our broad query.

final
    - time: 73.27ms
    - performance:  Our queries are now broader, and the main
                    ICS website can actually be found in the queries.
                    Important text along with our tuning of the
                    individual quality factors helped achieve these results.


[ 13 ]
query: "mondego"

initial
    - time: 1.08ms
    - performance:   The results does not show mondego at the top of the
                    rankings, only as the 4th result. In fact, a news
                    site congratulating mondego is shown at the top.

final
    - time: 1.39ms
    - performance:  The results change the ordering such that the "mondego"
                    main website is at the top. We achieve this by using
                    important text promotions to emphasize the main website.


[ 14 ]
query: "I need assistance"

initial
    - time: 31.24ms
    - performance:  While the query is related to lab assistants, it's possible
                    the query could mean other things such as help with general
                    UCI affairs. Additionally, the last query references a project,
                    which is not very "assistance"-related. There were also
                    duplicates, which is not ideal.

final
    - time: 9.46ms
    - performance:  Our queries now return a link to an accessibility page along
                    with student affairs. At the same time, our query continues to
                    have lab assistants listed. Duplicates are no longer returned.
                    Cosine similarity and duplicate detection helped with improving
                    this query.


[ 15 ]
query: "print("Hello world!")"

initial
    - time: 0.00ms
    - performance:  The query did not return any useful
                    results which was strange for a basic
                    Python construct.

final
    - time: 2.48ms
    - performance:  The query now returns the proper results.
                    We fixed this by improving the tokenization
                    of the query with minimal time difference.
                    This also points to basic Python exercises,
                    which is expected for this basic Python code.


[ 16 ]
query: "Advancements in quantum computing"

initial
    - time: 73.10ms
    - performance:  The query contained many duplicates for our top
                    results, which is not very useful if you want
                    to know about other advancements in quantum
                    computing.

final
    - time: 0.00ms
    - performance:  We saw duplicates removed from our results.
                    Additionally, the query points to quantum
                    as a CS research area and news/notes, which
                    showcase quantum computing advancements.
                    The query also maintains the top result from
                    our initial engine as the 4th result.

                    Duplicate detection helped us achieve these
                    results along with static quality scoring
                    from PageRank / HITS.


[ 17 ]
query: "The way that something is done in a particular area of study at a place 
where people do research and study"

initial
    - time: 425.7808ms
    - performance:  This query is overly wordy and filled with 
                    common words and phrases that add little 
                    value to the search intent. The result of the 
                    query contains many duplicates and not many useful 
                    results, such as catalogue of books, table of 
                    contents for some pages, etc.

final
    - time: 11.5182ms
    - performance:  After refining the indexing process and applying 
                    advanced ranking algorithms like PageRank and HITS, 
                    the search results now focus more on high-quality 
                    academic and research-oriented pages.

                    Duplicate documents have been pruned significantly,
                    and the use of important tags within postings paired
                    with the query pre-processing away many stop-words has
                    improved the relevance of the search results.

                    Query time is greatly improved despite the high
                    number of stop-words. This is achieved with a cache
                    on Postings retrieval. While an initial query
                    might be slow, subsequent queries on the same
                    stop-words will be much faster.


[ 18 ]
query: "academic dishonesty"

initial
    - time: 38.39ms
    - performance:  The results from this query show seemingly unrelated
                    pages / URLs about academic dishonesty while the
                    actual page on academic dishonesty policies is at
                    the bottom of the ranking (ranked 5).

final
    - time: 4.11ms
    - performance:  With the integration of PageRank and HITS scores, 
                    along with better handling of technical and specific 
                    terms through cosine similarity and TF-IDF adjustments, 
                    the search now ranks the ICS page of academic dishonesty
                    at the top.

                    The pages in the previous query appear possibly because it
                    includes "academic" and "dishonesty", but are mostly pruned
                    due to duplicate detection, which also contributes to
                    improved query times.


[ 19 ]
query: "cheating policy"

initial
    - time: 21.96ms
    - performance:  The query yields mostly irrelevant results. The initial 
                    four results are off-target, yet the fifth result 
                    is notable, featuring a document that contains information
                    on computer disciplinary procedures (seems related to cheating).

final
    - time: 7.22ms
    - performance:  The query now presents academic dishonesty policies at the top,
                    which is certainly related to cheating policy. Additionally,
                    policies on computer disciplinary procedures (from the last query)
                    appear second on the ranking, which suggests our changes were
                    effective.

                    Our changes can be attributed by cosine similarity to emphasize
                    pages that are closely connected to "cheating policy" and importance
                    multipliers. Quality scores from PageRank and HITS also helped
                    push the pages up the ranking.


[ 20 ]
query: "big O notation"

initial
    - time: 9.95ms
    - performance:  The results from the query fails to return any meaningful
                    information about Big O notation. In fact, each of the pages
                    appear to sparsely contain the terms "big" and "notation"
                    instead of "big O notation" in some form. None of the pages
                    appear relevant to algorithms (which is closely connected
                    to big O notation).

final
    - time: 2.22ms
    - performance:  The results now correctly show the top pages containing
                    information about big O notation. For example, eppstein's 161
                    introduction to the analysis of algorithms contain big O.
                    Another example: pattis's ICS 46 lecture notes contain
                    big O somewhere.

                    We attribute the improvement to increasing the cosine
                    similarity factor which seems to better account for
                    each of the terms in the query, as such pages that
                    are highly similar are highly likely to contain
                    "big" and "O" together.

                    Side note: performance improved greatly possibly from
                    cached postings retrieval.


